/**
 *  hypnoload.scss
 *    the hypnotic loading animation - by Freek van der Wand
 */
 
$width: 1rem !default;              // thickness of a spinning-wheel [1rem]
$count: 3 !default;                 // how many spinning-wheels [3]
$overlap: 0 !default;               // how much a spinning-wheel overlaps the next one [0]
$inner-space: 0 !default;           // 'missing' inner spinning wheel [0]

$color: #C4C4C4 !default;           // primary fill color [#C4C4C4]
$colors: () !default;               // defines a color for each spinning-wheel [()]
$color-sec: transparent !default;   // secondary color [transparent]
$colors-sec: () !default;           // [()]
$color-ter: transparent !default;   // tertiary color [transparent]
$colors-ter: () !default;           // [()]
$color-qua: transparent !default;   // quaternary color [trasnparent]
$colors-qua: () !default;           // [()]
$color-dir: 'in' !default;          // in which 'direction' the color manipulation should go ['in']
$col-change: 50 !default;           // how much the color should change [50]
$color-func: 'darken' !default;     // the function used to manipulate the colors ['darken']

$bg-color: transparent !default;    // background color [transparent]
$bg-padding: 0 !default;            // background overlap [0]
$shadow: 0 0 0 0 !default;          // box / bg shadow [0 0 0 0]

$duration-max: 4 !default;          // maximal animation duration (biggest spinning wheel) [4]
$duration-min: 1 !default;          // minimal animiaton duration (smallest spinning wheel) [1]
$fps: 60 !default;                  // desired FPS [60]

@import "hypnoload.style.scss";

$element-count: $count + $inner-space;
$max-size: $element-count * $width * 2;

// reveses a list
@function reverse($list) {
  $result: ();
  @for $i from length($list)*-1 through -1 {
    $result: append($result, nth($list, abs($i)))
  }
  @return $result;
}

// create colors list
@function colors($col) {
  $cols: ();
  @for $i from 1 to ($element-count - $inner-space + 1) {
    @if $color-func == 'none' {
      $cols: append($cols, $col);
    }
    @if $color-func == 'darken' {
      $cols: append($cols, darken($col, ($col-change/ $count * $i) ));
    }
    @if $color-func == 'lighten' {
      $cols: append($cols, lighten($col, ($col-change / $count * $i) ));
    }
    @if $color-func == 'saturate' {
      $cols: append($cols, saturate($col, ($col-change / $count * $i) )); 
    }
    @if $color-func == 'desaturate' {
      $cols: append($cols, desaturate($col, ($col-change / $count * $i) )); 
    }
  }
  @if $color-dir == 'out' {
    $cols: reverse($cols);
  }
  @return $cols;
}

// populate colors list
@if length($colors) == 0 {
  $colors: colors($color);
}
@if length($colors-sec) == 0 {
  $colors-sec: colors($color-sec);
}
@if length($colors-ter) == 0 {
  $colors-ter: colors($color-ter);
}
@if length($colors-qua) == 0 {
  $colors-qua: colors($color-qua);
}

// map color
$color-top: $color;
$color-right: $color-sec;
$color-bottom: $color;
$color-left: $color-sec;
@if $color-qua != transparent {
  $color-bottom: $color-ter;
  $color-left: $color-qua;
}

// map colors
$colors-top: $colors;
$colors-right: $colors-sec;
$colors-bottom: $colors;
$colors-left: $colors-sec;
@if $color-qua != transparent {
  $colors-bottom: $colors-ter;
  $colors-left: $colors-qua;
}

@keyframes hypnoload-spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(720deg); }
}

.hypnoload,
.hypnoload * {
  box-sizing: border-box;
}

.hypnoload {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  border-radius: 50%;
  transform: translate(-50%, -50%);
  background-color: $bg-color;
  box-shadow: $shadow $bg-color;
  width: $max-size + $overlap*2 + $bg-padding*2;
  height: $max-size + $overlap*2 + $bg-padding*2;
  letter-spacing: $count * 1px; // used to add spans via JS

  span {
    display: block;
    border: ($width + $overlap) solid transparent;
    border-top-color: $color-top;
    border-left-color: $color-left;
    border-bottom-color: $color-bottom;
    border-right-color: $color-right;
    border-radius: 50%;
    animation: hypnoload-spin ($duration-max + s) steps($fps * $duration-max) infinite;
    position: absolute;
    will-change: transform;
  }
  // position, size and animation for each spinning-wheel
  @for $i from 1 to ($element-count - $inner-space + 1) {
    span:nth-child(#{$i}) { 
      left: ($max-size - ($max-size - (($i - 1) * (2 * $width)))) / 2 + $bg-padding;
      top: ($max-size - ($max-size - (($i - 1) * (2 * $width)))) / 2 + $bg-padding;

      width: $max-size - (($i - 1) * (2 * $width)) + $overlap*2;
      height: $max-size - (($i - 1) * (2 * $width)) + $overlap*2;

      animation-duration: ( ( ($duration-max - $duration-min) / ($element-count - 1) ) * ($element-count - $i) + $duration-min )+s;
      animation-timing-function: steps($fps * ( ( ($duration-max - $duration-min) / ($element-count - 1) ) * ($element-count - $i) + $duration-min ) );
    }
  }

  // REVERSE
  &.hyl-reverse {
    span:nth-child(even) {
      animation-direction: reverse;
    }
  }
  // ROUNDED
  &.hyl-rounded {
    span {
      box-shadow: 0 $width + $overlap 0 $color-bottom, 0 ($width + $overlap) * (-1) 0 $color-top,
                  ($width + $overlap) 0 0 $color-right, ($width + $overlap) * (-1) 0 0 $color-left;
      border-color: transparent;
    }
    @if $bg-color != 'transparent' {
      width: $max-size + $overlap*2 + $bg-padding*2 + ($width + $overlap)*2;
      height: $max-size + $overlap*2 + $bg-padding*2 + ($width + $overlap)*2;
      @for $i from 1 to ($element-count - $inner-space + 1) {
        span:nth-child(#{$i}) {
          left: ($max-size - ($max-size - (($i - 1) * (2 * $width)))) / 2 + $bg-padding + ($width + $overlap);
          top: ($max-size - ($max-size - (($i - 1) * (2 * $width)))) / 2 + $bg-padding + ($width + $overlap);
        }
      }
    }
  }
  &.hyl-rounded-simple {
    span {
      box-shadow: 0 $width + $overlap 0 $color-top;
      border-color: transparent !important;
    }
  }
  // COLORS
  &.hyl-colors {
    @for $i from 1 to ($element-count - $inner-space + 1) {
      span:nth-child(#{$i}) {
        border-top-color: nth($colors-top,$i);
        border-bottom-color: nth($colors-bottom,$i);

        border-left-color: nth($colors-left,$i);
        border-right-color: nth($colors-right,$i);
      }

      &.hyl-rounded {
        span:nth-child(#{$i}) {
          border-color: transparent;
          box-shadow: 0 $width + $overlap 0 nth($colors-bottom,$i), 0 ($width + $overlap) * (-1) 0 nth($colors-top,$i),
                      ($width + $overlap) 0 0 nth($colors-right,$i), ($width + $overlap) * (-1) 0 0 nth($colors-left,$i);
        }
      }
      &.hyl-rounded-simple {
        span:nth-child(#{$i}) {
          border-color: transparent;
          box-shadow: 0 $width + $overlap 0 nth($colors-top,$i);
        }
      }
    }
  }
}
